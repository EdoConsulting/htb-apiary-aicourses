FORMAT: 1A
HOST: https://courses-api.alpha.org/3

# Courses (v3)

An API for interacting with courses, along with their session, venues and organisations among other utility resources.

## Authentication

You will need to use a user's access token when making requests to any non-public endpoint. The user's ID will be saved against courses, venues and organisations. So make sure you are using the correct user token!

Make sure they have the *ACS* permission if they are an NAO or Admin making changes to utility resources.

## Utilities

There are several utility resources these allow us to use consistent UUIDs in the database, but still allow for localisation by NAOs.

It also allows all first or third party systems to gain access to a list of parameters to use when creating a course along with their localised strings to use.


# Group Public

## Denominations list [/public/utilities/{locale}/denominations]

Fetch a list of denominations for a locale

+ Attributes (object)
    + UUID: anglican - denomination ID
    + label: Anglican - translated label for the denomination in the given locale

### Publicly list all denominations for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of denominations to list

+ Response 200 (application/json)

    + Attributes (object)
        + denominations (array)
            + (Denominations list)

## Languages list [/public/utilities/{locale}/languages]
Fetch a list of languages for a locale

+ Attributes
    + ISO: th - ISO code for language
    + label: Thai - translated label for language

### Publicly list all languages for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of languages to list

+ Response 200 (application/json)

    + Attributes (object)
        + languages (array)
            + (Languages list)

## Organisation Types [/public/utilities/{locale}/organisation-types]

Fetch a list of organisation types for a locale

### Publicly list all organisation types for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of organisation types to list

+ Response 200 (application/json)

    + Attributes (object)
        + organisationTypes (array)
            + (Organisation Type)

## Timezones [/public/utilities/{locale}/timezones/{countryCode}]

Fetch a list of timezones for a country

### Publicly list all timezones types for a locale and country code [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of timezones to list
    + countryCode (required, string, `GB`) ... Country code to filter timezones

+ Response 200 (application/json)

    + Attributes
        + timezones (Timezones array)

## All [/public/utilities/{locale}/all]

Combined list of public data for a locale

+ Attributes
    + denominations (array) - list of denominations
        + (Denominations list)
    + languages (array) - list of languages
        + (Languages list)
    + organisationTypes (array) - list of organisation types
        + (Organisation Type)
    + timezones (Timezones array) - list of timezones

### Publicly list all data for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale to list for

+ Response 200 (application/json)

    + Attributes (All)

# Group Courses

## Course [/courses]

+ Attributes
    + packages: 11, 12 (array)
    + language (Languages list)
    + denomination (Denominations list)
    + id: 45723 (number) - the course ID
    + name: `Example course` - name of the course
    + contact: `John Doe` - contact name
    + email: `johndoe@example.com` - contact email address
    + phone: `0771234567890` - contact phone number
    + type: `Alpha` - type of course
    + resources
    + start: `2016-02-08T09:00:00+0000` - start date of course
    + finish: `2016-02-15T18:00:00+0000` - end date of course
    + published: true (boolean) - is published
    + approved: true (boolean) - is approved
    + organisationId
    + sessions
    + ownerId: 190835 (number) - ID of the course owner
    + locale: `en_GB` - locale of the course
    + timezone: `Europe/London` - timezone of the course
    + length: 11 (number) - length of the course
    + presentationStyle: `live` - presentation style
    + contexts (array)
    + tasks (array)
    + source: alphabuilder - how the course was added
    + venue (Venue)
    + organisation

### List all courses [GET /courses?all,active,inactive]

Venues are automatically filtered to the owner's access token. Administrators with the role *ACS* can request all venues.

+ Request

    + Parameters
        + all = `false` (optional, boolean, `true`) ... If an administrator with the role *ACS* they can request all courses and not just the ones they own.
        + active = `true` (optional, boolean, `false`) ... Return active courses, inclusive of start date.
        + inactive = `false` (optional, boolean, `true`) ... Return inactive courses, exclusive of finish date.

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes
        + courses (array)
            + (Course)
        + pager (Pager)

### Create a course [POST]

You don't have to supply values for the sessions, these will be generated automatically. Try and send the course length and at least one package id where possible. Otherwise we will use the course type to generate the sessions.

Source should be `ab3`, `app`, or `courses`.

The following values are optional:

* finish (will be calculated)
* approved (defaults to true)
* published (defaults to false)
* type (if supplying at least one package id)
* packages (if supplying a type)
* resources
* presentationStyle (legacy for Alpha Builder 1-2 and Alpha App)
* contexts (legacy for Alpha Builder 1-2 and Alpha App)
* timezone (automatically set based on the latitude and longitude of the venue)

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Course)

+ Response 201 (application/json)

    + Attributes (Course)

### Read a course [GET /courses/{id}]

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon
    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Course)

### Update a course [PUT /courses/{id}]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

It is **not** recommended that you change these fields:

* start
* finish
* type
* length
* contexts
* presentationStyle
* source
* locale
* language

Sessions will **never be regenerated** by simply changing values of a course. Use the separate API for updating sessions.

You cannot change packages through this API.

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Course)


+ Response 200 (application/json)


    + Attributes (Course)


### Delete a course [DELETE /courses/{id}]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

### Complete a task [PUT /courses/{id}/tasks/complete/{task}]

This will add a completed task to a course, rather than the update which would replace currently completed tasks.

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon
        + task (required, string, `invite`) ... The key of a task to complete for a course

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Course)
    
### Update packages [PUT /courses/{id}/packages]

Wipe and replace all packages for a course.

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes
        + packages (array)
            + (number) - packageId

### Get course by username [GET /courses/fetch/{username}]

Return the latest course for a user.

+ Request (application/json)
    + Parameters
        + username {required, string, `name@example.org`} ... user who created course
    + Headers

            Authorization: Bearer {accessToken}

+ Response (application/json)
    + Attributes (Course)
    

## Invite Email Copy [/courses/{id}/invite-email-copy]

Get text for an email to invite the course contact to host a session.

**This URL is PUBLIC.**

### Get email [GET]

+ Response 200 (application/json)
    + Attributes
        + content (string) - text of email

## Course iCal [/courses/{id}/ical]

Get a calendar item (ics file) for a course.

**This URL is PUBLIC.**

### Get iCal [GET]

+ Response 200 (text/calendar)

# Group Venues

## Venue [/venues]

Venues store locations where people run Alpha.

+ Attributes (object)
    + id: 23566 (number) - the venue ID
    + name: `Holy Trinity` - name of the venue
    + locale: `en_GB` - locale of the venue
    + addressLine1: `1 Sample Street` - 1st line of address
    + addressLine2 - 2nd line of address
    + addressLine3 - 3rd line of address
    + city: `London` - city
    + county: `London` - county
    + postcode: `W1A 1AA` - post code
    + country: GB - 2 character ISO country code
    + latitude: `51.4533268` - latitude of venue
    + longitude: `-2.5931839` - longitude of venue
    + ownerId: 124588 - user that owns the venue entry
    + created: `2015-12-17T11:33:04+0000` - datetime when created
    + updated: `2015-12-17T11:33:04+0000` - datetime when updated


### List all venues [GET /venues?all]

Venues are automatically filtered to the owner's access token. Administrators with the role *ACS* can request all venues.

+ Request

    + Parameters
        + all = `false` (optional, boolean, `true`) ... If an administrator with the role *ACS* they can request all venues and not just the ones they own.

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Attributes
        + venues (array)
            + (Venue)
        + pager (Pager)            

### Create a venue [POST]

If you don't supply a `latitude` and `longitude` then we will try and geo-encode values using the address supplied.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Venue)

+ Response 201 (application/json)

    + Attributes (Venue)


## Venue [/venues/{id}]

+ Parameters
    + id (required, integer, `1`) ... Id of a venue to act upon

### Read a venue [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Venue)

### Update a venue [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Attributes (Venue)


+ Response 200 (application/json)

    + Attributes (Venue)


### Delete a venue [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (application/json)

### Search venues [GET /venue/search

Return a list of venues for the current user, most recently updated first.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (array [Venue])

# Group Organisations

## Organisation [/organisations]

Organisations which run Alpha.

+ Attributes
    + id: 23859 - organisation ID
    + name: `Example Org` - name of organisation
    + locale: en_GB - locale for organisation
    + addressLine1: `1 Examplestrasse` - address line 1
    + addressLine2 - address line 2
    + addressLine3 - address line 3
    + city: Sometown - city 
    + county: Sampleshire - county
    + postcode: XX2 3YY - postcode / zip
    + country: GB - country for organisation
    + latitude: `51.4533268` - latitude
    + longitude: `-2.5931839` - longitude
    + ownerId: 190835 - ID of owning user
    + created: `2015-12-17T11:33:04+0000` - when created
    + updated: `2015-12-17T11:33:04+0000` - when updated
    + type (Organisation Type)
    + phone - phone number
    + website: `https://www.example.com` - organisation website


### List all organisations [GET /organisations?all]

Organisations are automatically filtered to the owner's access token. Administrators with the role *ACS* can request all organisations.

+ Request

    + Parameters
        + all = `false` (optional, boolean, `true`) ... If an administrator with the role *ACS* they can request all organisations and not just the ones they own.
    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"organisations":[{"id":10,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:26:59+0000","updated":"2015-03-06T12:26:59+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}}],"pager":{"totalItems":1,"totalPages":1,"currentPage":1}}


### Create an organisation [POST]

If you don't supply a `latitude` and `longitude` then we will try and geo-encode values using the address supplied.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Organisation)


+ Response 201 (application/json)

    + Attributes (Organisation)

### Read an organisation [GET /organisations/{id}]

+ Request

    + Parameters
        + id (required, integer, `1`) ... Id of organisation to act upon

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Organisation)

### Update an organisation [PUT /organisations/{id}]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Parameters
        + id (required, integer, `1`) ... Id of organisation to act upon

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Organisation)

+ Response 200 (application/json)

    + Attributes (Organisation)


### Delete an organisation [DELETE /organisations/{id}]

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of organisation to act upon

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (application/json)

### Organisation search [GET /organisation/search]

Return a list of organisation for the current user, most recently updated first.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (array [Organisation])


# Group Sessions

## Reschedule a course [/courses/{courseId}/reschedule]

Reschedules all of a courses sessions to a new start datetime.

**Warning** will wipe any changes made to existing sessions.

+ Parameters
    + courseId (required, integer, `1`) ... The id of the course you want to reschedule.

### Reschedule [PUT]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes
        start: `2016-01-01T19:00:00+0000` - new start time
        timezone: Europe/London - timezone to use


+ Response 200 (application/json)


    + Attributes (Course)

## Update sessions [/course/{courseId}/sessions]

Mass update sessions of a course.

+ Parameters
    + courseId (required, integer, `1`) ... The id of the course you want to update the sessions of.

### Mass update [PUT]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes
        + sessions (array)
            + (Session update)


+ Response 200 (application/json)

    + Attributes (Course)

# Group Denominations

## Denomination [/utilities/{locale}/denominations]

Denominations are a utility resource for courses, and are used to fetch the Denomination UUID when creating a course.

Please note an Alpha administrator has to create denominations in the base locale _en_ before any NAO can create a denomination in their own locale.

+ Attributes
    + UUID: anglican - ID for denomination
    + label: Anglicano - translated label for denomination

+ Parameters
    + locale (required, string, `es`) ... Locale of denominations to list

### List all denominations for a locale [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes
        + denominations (array)
            + (Denomination)

### Create a denomination [POST]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Denomination)


+ Response 201 (application/json)

    + Attributes (Denomination)

## Denomination [/utilities/{locale}/denominations/{UUID}]

+ Parameters
    + locale (required, string, `en`) ... Locale of denominations to list
    + UUID (required, string, `anglican`) ... UUID of denomination to act upon

### Read a denomination [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Denomination)

### Update a denomination [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Denomination)

+ Response 200 (application/json)

    + Attributes (Denomination)


### Delete a denomination [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (application/json)


# Group Languages

## Language [/utilities/{locale}/languages]

Languages are a utility resource for courses, and are used to fetch the language ISO when creating a course.

Please note an Alpha administrator has to create languages in the base locale _en_ before any NAO can create a language in their own locale.

+ Parameters
    + locale (required, string, `de`) ... Locale of languages to list
    
+ Attributes
    ISO: en - ISO code for the language
    label: Englisch - translated name of language

### List all languages for a locale [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Attributes
        + languages (array)
            + (Language)

### Create a language [POST]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Language)

+ Response 201 (application/json)

    + Attributes (Language)


## Language [/utilities/{locale}/languages/{ISO}]

+ Parameters
    + locale (required, string, `en`) ... Locale of languages to list
    + ISO (required, string, `fr`) ... ISO of lanuage to act upon


### Read a language [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Language)

### Update a language [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Language)

+ Response 200 (application/json)

    + Attributes (Language)


### Delete a language [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (application/json)


# Group Organisation Types

## Organisation Type [/utilities/{locale}/organisation-types]

Organisation Types are a utility resource for organisations, and are used to fetch the Organisation Type UUID when creating an organisation.

Please note an Alpha administrator has to create organisation types in the base locale _en_ before any NAO can create an organisation type in their own locale.

+ Attributes
    + UUID: home - organisation type ID
    + label: Home - translated label for the organisation type

+ Parameters
    + locale (required, string, `en`) ... Locale of organisation types to list

### List all organisation types for a locale [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes
        + organisationTypes (array)
            + (Organisation Type)

### Create a organisation type [POST]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Organisation Type)

+ Response 201 (application/json)

    + Attributes (Organisation Type)

## Organisation Type [/utilities/{locale}/organisation-types/{UUID}]

+ Parameters
    + locale (required, string, `en`) ... Locale of organisation type
    + UUID (required, string, `workplace`) ... UUID of organisation type to act upon

### Read an organisation type [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Organisation Type)

### Update an organisation type [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Organisation Type)

+ Response 200 (application/json)

    + Attributes (Organisation Type)

### Delete an organisation type [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (application/json)

# Group Helper
## Utility Data for User [/helper/all/{locale}]

A utility method to get data for the current user.

+ Attributes
    + denominations (array) - denominations
        + (Denomination)
    + languages (array) - languages
        + (Language)
    + organisationTypes (array) - organisation types
        + (Organisation Type)
    + organisations (array) - the user's organisations
        + (Organisation)
    + venues (array) - the user's venues
        + (Venue)
    + timezones (Timezones array)

# Group Bulk Upload
## Bulk Upload [/bulkupload]

Upload courses data in the form of a spreadsheet (CSV or Excel format). The first row of the spreadsheet should contain
column headers identifying the data in subsequent rows. Not all columns 

* `First name` - first name of course contact
* `Surname` - surname of course contact
* `Email` - email of course contact
* `Phone` - phone number
* `Alpha name` - name of course
* `Alpha Type` - type of course
* `Denomination` - denomination ID
* `Start Date (YYYY-MM-DD)` - start date
* `Start Time (HH:MM)` - start time
* `Language` - language code
* `Materials` - comma-separated list of materials **LOOKS LIKE THIS IS NOT USED IN V3**
* `Published (yes/no)` - published?
* `Country` - course country code
* `Organisation name` - name of organisation
* `Organisation type` - type of organisation
* `Organisation website (optional)` - website URL
* `Organisation address line 1` - address line 1
* `Organisation address line 2 (optional)` - address line 2
* `Organisation city/town` - city/town
* `Organisation Country` - country code 
* `Organisation County` - county/state
* `Organisation postcode (optional)` - postcode/zip
* `Org Same as Venue (yes/no)` - is the organisation same as the venue? (if so venue data will be ignored)
* `Venue name` - name of venue
* `Venue address line 1` - first line of address
* `Venue address line 2 (optional)` - second line of address
* `Venue city/town` - city/town
* `Venue Country` - country code
* `Venue County` - county/state
* `Venue postcode (optional)` - postcode/zip


### Upload request [POST]

+ Request (multipart/form-data)

    + Headers

            Authorization: Bearer {accessToken}

# Group Notifications

## Notification [/notification/{email}]

+ Properties
    + email (required, string, `sample@example.org`) ... Email address

+ Attributes
    + id: 12345 (number) - notification ID
    + email: `sample@sample.com` - email address
    + subscribed: false (boolean) - is the address subscribed to notifications?
    + publishedOnly: true (boolean) - notify about published courses only?
    + countries: GB, DE (array[string]) - countries to get notifications for
    + date_format: d/m/Y - date format
    + created: `2015-12-17T11:33:04+0000` - datetime when created
    + updated: `2015-12-17T11:33:04+0000` - datetime when updated
    + deleted: false (boolean)

### Get notification [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer {accessToken}

+ Response (application/json)

    + Attributes (application/json)

### Upsert notification [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (application/json)

+ Response (application/json)

    + Attributes (application/json)

# Group Common Data
Common data structures used in requests and responses are defined here. This section
will be migrated to **Data Structures** when a bug relating to definition of types is fixed.
## Pager [/fake1]
Pagination data in lists
+ Attributes (object)
    + totalItems: 2 (number) - total number of items
    + totalPages: 2 (number) - total number of pages
    + currentPage: 1 (number) - current page number

## Session update [/fake2]
Session data
+ Attributes
    + UUID: S01 - session ID
    + start: `2015-04-26T18:00:00+0000` - start time

## Timezones array [/fake3]
This is a sample subset of timezone data for testing purposes.
    + Africa    (object)
        + Africa/Abidjan    :     Abidjan
        + Africa/Accra    :     Accra
    + America    (object)
        + America/Adak    :     Adak
        + America/Anchorage    :     Anchorage
        + America/Yellowknife    :     Yellowknife
    + Antarctica    (object)
        + Antarctica/Casey    :     Casey
        + Antarctica/Davis    :     Davis
        + Antarctica/DumontDUrville    :     DumontDUrville
        + Antarctica/Vostok    :     Vostok
    + Arctic    (object)
        + Arctic/Longyearbyen    :     Longyearbyen
    + Asia    (object)
        + Asia/Aden    :     Aden
        + Asia/Almaty    :     Almaty
        + Asia/Amman    :     Amman
        + Asia/Anadyr    :     Anadyr
        + Asia/Aqtau    :     Aqtau
        + Asia/Yerevan    :     Yerevan
    + Atlantic    (object)
        + Atlantic/Azores    :     Azores
        + Atlantic/Bermuda    :     Bermuda
        + Atlantic/Canary    :     Canary
        + Atlantic/Stanley    :     Stanley
    + Australia    (object)
        + Australia/Adelaide    :     Adelaide
        + Australia/Brisbane    :     Brisbane
        + Australia/Sydney    :     Sydney
    + Europe    (object)
        + Europe/Amsterdam    :     Amsterdam
        + Europe/Andorra    :     Andorra
        + Europe/Athens    :     Athens
        + Europe/Zurich    :     Zurich
    + Indian    (object)
        + Indian/Antananarivo    :     Antananarivo
        + Indian/Reunion    :     Reunion
    + Pacific    (object)
        + Pacific/Apia    :     Apia
        + Pacific/Auckland    :     Auckland
        + Pacific/Tongatapu    :     Tongatapu
        + Pacific/Wake    :     Wake
        + Pacific/Wallis    :     Wallis
    + Other    (object)
        + UTC    :     UTC