FORMAT: 1A
HOST: https://courses-api.alpha.org/3

# Courses (v3)

An API for interacting with courses, along with their session, venues and organisations among other utility resources.

## Authentication

You will need to use a user's access token when making requests to any non-public endpoint. The user's ID will be saved against courses, venues and organisations. So make sure you are using the correct user token!

Make sure they have the *ACS* permission if they are an NAO or Admin making changes to utility resources.

## Utilities

There are several utility resources these allow us to use consistent UUIDs in the database, but still allow for localisation by NAOs.

It also allows all first or third party systems to gain access to a list of parameters to use when creating a course along with their localised strings to use.


# Group Public

## Denominations list [/public/utilities/{locale}/denominations]

Fetch a list of denominations for a locale

+ Attributes (object)
    + UUID: anglican - denomination ID
    + label: Anglican - translated label for the denomination in the given locale

### Publicly list all denominations for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of denominations to list

+ Response 200 (application/json)

    + Attributes (object)
        + denominations (array)
            + (Denominations list)

## Languages list [/public/utilities/{locale}/languages]
Fetch a list of languages for a locale

+ Attributes
    + ISO: th - ISO code for language
    + label: Thai - translated label for language

### Publicly list all languages for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of languages to list

+ Response 200 (application/json)

    + Attributes (object)
        + languages (array)
            + (Languages list)

## Organisation Types [/public/utilities/{locale}/organisation-types]

Fetch a list of organisation types for a locale

+ Attributes
    + UUID: home - organisation type ID
    + label: Home - translated label for the organisation type

### Publicly list all organisation types for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of organisation types to list

+ Response 200 (application/json)

    + Attributes (object)
        + organisationTypes (array)
            + (Organisation Types)

## Timezones [/public/utilities/{locale}/timezones/{countryCode}]

Fetch a list of timezones for a country

### Publicly list all timezones types for a locale and country code [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale of timezones to list
    + countryCode (required, string, `GB`) ... Country code to filter timezones

+ Response 200 (application/json)

    + Body
    
            {
              "timezones": {
                "Africa": {
                  "Africa\/Abidjan": "Abidjan",
                  "Africa\/Accra": "Accra"
                },
                "America": {
                  "America\/Adak": "Adak",
                  "America\/Anchorage": "Anchorage",
                  "America\/Yellowknife": "Yellowknife"
                },
                "Antarctica": {
                  "Antarctica\/Casey": "Casey",
                  "Antarctica\/Davis": "Davis",
                  "Antarctica\/DumontDUrville": "DumontDUrville",
                  "Antarctica\/Vostok": "Vostok"
                },
                "Arctic": {
                  "Arctic\/Longyearbyen": "Longyearbyen"
                },
                "Asia": {
                  "Asia\/Aden": "Aden",
                  "Asia\/Almaty": "Almaty",
                  "Asia\/Amman": "Amman",
                  "Asia\/Anadyr": "Anadyr",
                  "Asia\/Aqtau": "Aqtau",
                  "Asia\/Yerevan": "Yerevan"
                },
                "Atlantic": {
                  "Atlantic\/Azores": "Azores",
                  "Atlantic\/Bermuda": "Bermuda",
                  "Atlantic\/Canary": "Canary",
                  "Atlantic\/Stanley": "Stanley"
                },
                "Australia": {
                  "Australia\/Adelaide": "Adelaide",
                  "Australia\/Brisbane": "Brisbane",
                  "Australia\/Sydney": "Sydney"
                },
                "Europe": {
                  "Europe\/Amsterdam": "Amsterdam",
                  "Europe\/Andorra": "Andorra",
                  "Europe\/Athens": "Athens",
                  "Europe\/Zurich": "Zurich"
                },
                "Indian": {
                  "Indian\/Antananarivo": "Antananarivo",
                  "Indian\/Reunion": "Reunion"
                },
                "Pacific": {
                  "Pacific\/Apia": "Apia",
                  "Pacific\/Auckland": "Auckland",
                  "Pacific\/Tongatapu": "Tongatapu",
                  "Pacific\/Wake": "Wake",
                  "Pacific\/Wallis": "Wallis"
                },
                "Other": {
                  "UTC": "UTC"
                }
              }
            }

## All [/public/utilities/{locale}/all]

Combined list of public data for a locale

+ Attributes
    + denominations (array) - list of denominations
        + (Denominations list)
    + languages (array) - list of languages
        + (Languages list)
    + organisationTypes (array) - list of organisation types
        + (Organisation Types)
    + timezones (object) - list of timezones

### Publicly list all data for a locale [GET]

+ Parameters
    + locale (required, string, `en`) ... Locale to list for

+ Response 200 (application/json)

    + Attributes (All)

# Group Courses

## Courses [/courses]

+ Attributes
    + packages: 11, 12 (array)
    + language (Languages list)
    + denomination (Denominations list)
    + id: 45723 (number) - the course ID
    + name: `Example course` - name of the course
    + contact: `John Doe` - contact name
    + email: `johndoe@example.com` - contact email address
    + phone: `0771234567890` - contact phone number
    + type: `Alpha` - type of course
    + resources
    + start: `2016-02-08T09:00:00+0000` - start date of course
    + finish: `2016-02-15T18:00:00+0000` - end date of course
    + published: true (boolean) - is published
    + approved: true (boolean) - is approved
    + organisationId
    + sessions
    + ownerId: 190835 (number) - ID of the course owner
    + locale: `en_GB` - locale of the course
    + timezone: `Europe/London` - timezone of the course
    + length: 11 (number) - length of the course
    + presentationStyle: `live` - presentation style
    + contexts (array)
    + tasks (array)
    + source: alphabuilder - how the course was added
    + venue
    + organisation

### List all courses [GET /courses?all,active,inactive]

Venues are automatically filtered to the owner's access token. Administrators with the role *ACS* can request all venues.

+ Request

    + Parameters
        + all = `false` (optional, boolean, `true`) ... If an administrator with the role *ACS* they can request all courses and not just the ones they own.
        + active = `true` (optional, boolean, `false`) ... Return active courses, inclusive of start date.
        + inactive = `false` (optional, boolean, `true`) ... Return inactive courses, exclusive of finish date.

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes
        + courses (array)
            + (Courses)
        + pager (object)
            + totalItems: 4
            + totalPages: 1
            + currentPage: 1
    
### Create a course [POST]

You don't have to supply values for the sessions, these will be generated automatically. Try and send the course length and at least one package id where possible. Otherwise we will use the course type to generate the sessions.

Source should be `ab3`, `app`, or `courses`.

The following values are optional:

* finish (will be calculated)
* approved (defaults to true)
* published (defaults to false)
* type (if supplying at least one package id)
* packages (if supplying a type)
* resources
* presentationStyle (legacy for Alpha Builder 1-2 and Alpha App)
* contexts (legacy for Alpha Builder 1-2 and Alpha App)
* timezone (automatically set based on the latitude and longitude of the venue)

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Courses)

+ Response 201 (application/json)

    + Attributes (Courses)

### Read a course [GET /courses/{id}]

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon
    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Courses)

### Update a course [PUT /courses/{id}]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

It is **not** recommended that you change these fields:

* start
* finish
* type
* length
* contexts
* presentationStyle
* source
* locale
* language

Sessions will **never be regenerated** by simply changing values of a course. Use the separate API for updating sessions.

You cannot change packages through this API.

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon

    + Headers

            Authorization: Bearer {accessToken}

    + Attributes (Courses)


+ Response 200 (application/json)


    + Attributes (Courses)


### Delete a course [DELETE /courses/{id}]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

### Complete a task [PUT /courses/{id}/tasks/complete/{task}]

This will add a completed task to a course, rather than the update which would replace currently completed tasks.

+ Request
    + Parameters
        + id (required, integer, `1`) ... Id of a course to act upon
        + task (required, string, `invite`) ... The key of a task to complete for a course

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Attributes (Courses)

## Invite Email Copy [/courses/{id}/invite-email-copy]

Get text for an email to invite the course contact to host a session.

**This URL is PUBLIC.**

### Get email [GET]

+ Response 200 (application/json)
    + Attributes
        + content (string) - text of email

## Course iCal [/courses/{id}/ical]

Get a calendar item (ics file) for a course.

**This URL is PUBLIC.**

### Get iCal [GET]

+ Response 200 (text/calendar)

# Group Venues

## Venues [/venues?all]

Venues store locations where people run Alpha.

+ Parameters
    + all = `false` (optional, boolean, `true`) ... If an administrator with the role *ACS* they can request all venues and not just the ones they own.

### List all venues [GET]

Venues are automatically filtered to the owner's access token. Administrators with the role *ACS* can request all venues.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"venues":[{"id":7,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:16:23+0000","updated":"2015-03-06T12:16:23+0000"}],"pager":{"totalItems":1,"totalPages":1,"currentPage":1}}

## Venues [/venues]

### Create a venue [POST]

If you don't supply a `latitude` and `longitude` then we will try and geo-encode values using the address supplied.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","country":"GB","county":"Greater London","latitude":1.1012,"longitude":-1.10122,"name":"Alpha International","postcode":"SW7 1JA","locale":"en_GB"}

+ Response 201 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"venue":{"id":7,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:16:23+0000","updated":"2015-03-06T12:16:23+0000"}}


## Venue [/venues/{id}]

+ Parameters
    + id (required, integer, `1`) ... Id of a venue to act upon

### Read a venue [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"venue":{"id":4,"name":"Venue Name","addressLine1":"Address 1","addressLine2":"Address 2","addressLine3":"Address 3","city":"City","county":"County","postcode":"SW15 3SA","country":"GB","latitude":1.1011,"longitude":-1.10123,"ownerId":1,"created":"2015-03-06T11:30:34+0000","updated":"2015-03-06T11:30:34+0000"}}


### Update a venue [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","country":"GB","county":"Greater London","latitude":1.1012,"longitude":-1.10122,"name":"Alpha International","postcode":"SW7 1JA","locale":"en_GB"}


+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"venue":{"id":4,"name":"Alpha International","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T11:30:34+0000","updated":"2015-03-06T11:32:41+0000"}}


### Delete a venue [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

    + Headers

            Accept: application/json


# Group Organisations

## Organisations [/organisations?all]

Organisations which run Alpha.

+ Parameters
    + all = `false` (optional, boolean, `true`) ... If an administrator with the role *ACS* they can request all organisations and not just the ones they own.

### List all organisations [GET]

Organisations are automatically filtered to the owner's access token. Administrators with the role *ACS* can request all organisations.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"organisations":[{"id":10,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:26:59+0000","updated":"2015-03-06T12:26:59+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}}],"pager":{"totalItems":1,"totalPages":1,"currentPage":1}}


## Organisations [/organisations]

### Create an organisation [POST]

If you don't supply a `latitude` and `longitude` then we will try and geo-encode values using the address supplied.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","country":"GB","county":"Greater London","latitude":1.1012,"locale":"en_GB","longitude":-1.10122,"name":"Alpha International","phone":"+44 182 3239 232","postcode":"SW7 1JA","type":"workplace","website":"http://www.alpha.org"}

+ Response 201 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"organisation":{"id":11,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:28:02+0000","updated":"2015-03-06T12:28:02+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}}}


## Organisation [/organisations/{id}]

+ Parameters
    + id (required, integer, `1`) ... Id of a venue to act upon

### Read an organisation [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"organisation":{"id":11,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:28:02+0000","updated":"2015-03-06T12:28:02+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}}}


### Update an organisation [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","country":"GB","county":"Greater London","latitude":1.1012,"locale":"en_GB","longitude":-1.10122,"name":"Alpha International","phone":"+44 182 3239 232","postcode":"SW7 1JA","type":"workplace","website":"http://www.alpha.org"}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"organisation":{"id":11,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:28:02+0000","updated":"2015-03-06T12:29:23+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}}}


### Delete an organisation [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

    + Headers

            Accept: application/json


# Group Sessions

## Reschedule a course [/course/{courseId}/reschedule]

Reschedules all of a courses sessions to a new start datetime.

**Warning** will wipe any changes made to existing sessions.

+ Parameters
    + courseId (required, integer, `1`) ... The id of the course you want to reschedule.

### Reschedule [PUT]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"start":"2016-01-01T19:00:00+0000","timezone":"Europe/London"}


+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"course":{"packages":[42,2],"id":13,"name":"My Course","contact":"Jordan de Laune","email":"jordan@cultivate4.com","type":"Alpha","resources":"book,video","start":"2016-01-01T19:00:00+0000","finish":"2016-03-04T19:00:00+0000","published":true,"approved":true,"sessions":[{"title":"Preparation","start":"2015-12-18T19:00:00+0000","type":"preparation","hash":null,"UUID":"P01"},{"title":"Training","start":"2015-12-25T19:00:00+0000","type":"training","hash":null,"UUID":"T01"},{"title":"Training","start":"2016-02-04T19:00:00+0000","type":"training","hash":null,"UUID":"T02"},{"title":"Life: Is This It?","start":"2016-01-01T19:00:00+0000","type":"standard","hash":null,"UUID":"S01"},{"title":"Jesus: Who is He?","start":"2016-01-01T19:00:00+0000","type":"standard","hash":null,"UUID":"S02"},{"title":"Cross: Why Did Jesus Die?","start":"2016-01-08T19:00:00+0000","type":"standard","hash":null,"UUID":"S03"},{"title":"Faith: How Can We have Faith?","start":"2016-01-15T19:00:00+0000","type":"standard","hash":null,"UUID":"S04"},{"title":"Prayer: Why and How Do I Pray?","start":"2016-01-22T19:00:00+0000","type":"standard","hash":null,"UUID":"S05"},{"title":"Bible: Why and How Do I Read the Bible?","start":"2016-01-29T19:00:00+0000","type":"standard","hash":null,"UUID":"S06"},{"title":"Follow: How Does God Guide Us Into Full Life?","start":"2016-02-05T19:00:00+0000","type":"standard","hash":null,"UUID":"S07"},{"title":"Evil: How Can I Resist Evil?","start":"2016-02-12T19:00:00+0000","type":"standard","hash":null,"UUID":"S09"},{"title":"Healing: Does God Heal Today?","start":"2016-02-19T19:00:00+0000","type":"standard","hash":null,"UUID":"S10"},{"title":"Church: What About the Church and Telling Others?","start":"2016-02-26T19:00:00+0000","type":"standard","hash":null,"UUID":"S17"},{"title":"After Alpha","start":"2016-03-04T19:00:00+0000","type":"after","hash":null,"UUID":"A01"}],"ownerId":1,"locale":"en_GB","length":10,"presentationStyle":"mixed","contexts":["standard","catholic"],"source":"AB","organisation":{"id":10,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:26:59+0000","updated":"2015-03-06T12:26:59+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}},"venue":{"id":7,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:16:23+0000","updated":"2015-03-06T12:16:23+0000"},"language":{"ISO":"en","label":"English"},"denomination":{"UUID":"anglican","label":"Anglican"},"timezone":"Europe/London"}}

## Update sessions [/course/{courseId}/session]

Mass update sessions of a course.

+ Parameters
    + courseId (required, integer, `1`) ... The id of the course you want to update the sessions of.

### Mass update [PUT]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"sessions":[{"UUID":"S01","start":"2017-01-01T00:00:00+0000"},{"UUID":"P01","start":"2018-01-01T00:00:00+0000"}],"timezone":"Europe/London"}


+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"course":{"packages":[42,2],"id":13,"name":"My Course","contact":"Jordan de Laune","email":"jordan@cultivate4.com","type":"Alpha","resources":"book,video","start":"2016-01-01T19:00:00+0000","finish":"2016-03-04T19:00:00+0000","published":true,"approved":true,"sessions":[{"title":"Preparation","start":"2018-01-01T00:00:00+0000","type":"preparation","hash":null,"UUID":"P01"},{"title":"Training","start":"2015-12-25T19:00:00+0000","type":"training","hash":null,"UUID":"T01"},{"title":"Training","start":"2016-02-04T19:00:00+0000","type":"training","hash":null,"UUID":"T02"},{"title":"Life: Is This It?","start":"2017-01-01T00:00:00+0000","type":"standard","hash":null,"UUID":"S01"},{"title":"Jesus: Who is He?","start":"2016-01-01T19:00:00+0000","type":"standard","hash":null,"UUID":"S02"},{"title":"Cross: Why Did Jesus Die?","start":"2016-01-08T19:00:00+0000","type":"standard","hash":null,"UUID":"S03"},{"title":"Faith: How Can We have Faith?","start":"2016-01-15T19:00:00+0000","type":"standard","hash":null,"UUID":"S04"},{"title":"Prayer: Why and How Do I Pray?","start":"2016-01-22T19:00:00+0000","type":"standard","hash":null,"UUID":"S05"},{"title":"Bible: Why and How Do I Read the Bible?","start":"2016-01-29T19:00:00+0000","type":"standard","hash":null,"UUID":"S06"},{"title":"Follow: How Does God Guide Us Into Full Life?","start":"2016-02-05T19:00:00+0000","type":"standard","hash":null,"UUID":"S07"},{"title":"Evil: How Can I Resist Evil?","start":"2016-02-12T19:00:00+0000","type":"standard","hash":null,"UUID":"S09"},{"title":"Healing: Does God Heal Today?","start":"2016-02-19T19:00:00+0000","type":"standard","hash":null,"UUID":"S10"},{"title":"Church: What About the Church and Telling Others?","start":"2016-02-26T19:00:00+0000","type":"standard","hash":null,"UUID":"S17"},{"title":"After Alpha","start":"2016-03-04T19:00:00+0000","type":"after","hash":null,"UUID":"A01"}],"ownerId":1,"locale":"en_GB","length":10,"presentationStyle":"mixed","contexts":["standard","catholic"],"source":"AB","organisation":{"id":10,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:26:59+0000","updated":"2015-03-06T12:26:59+0000","phone":"+44 182 3239 232","website":"http:\/\/www.alpha.org","type":{"UUID":"workplace","label":"Workplace"}},"venue":{"id":7,"name":"Alpha International","locale":"en_GB","addressLine1":"Old Brompton Road","addressLine2":"KnightsBridge","addressLine3":"South Kensington","city":"London","county":"Greater London","postcode":"SW7 1JA","country":"GB","latitude":1.1012,"longitude":-1.10122,"ownerId":1,"created":"2015-03-06T12:16:23+0000","updated":"2015-03-06T12:16:23+0000"},"language":{"ISO":"en","label":"English"},"denomination":{"UUID":"anglican","label":"Anglican"},"timezone":"Europe/London"}}


# Group Denominations

## Denominations [/utilities/{locale}/denominations]

Denominations are a utility resource for courses, and are used to fetch the Denomination UUID when creating a course.

Please note an Alpha administrator has to create denominations in the base locale _en_ before any NAO can create a denomination in their own locale.

+ Parameters
    + locale (required, string, `en`) ... Locale of denominations to list

### List all denominations for a locale [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"denominations":[{"UUID":"anglican","label":"Anglican"}]}


### Create a denomination [POST]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"UUID":"anglican","label":"Anglican"}

+ Response 201 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"denomination":{"UUID":"anglican","locale":"en_GB","label":"Anglican"}}


## Denomination [/utilities/{locale}/denominations/{UUID}]

+ Parameters
    + locale (required, string, `en`) ... Locale of denominations to list
    + UUID (required, string, `anglican`) ... UUID of denomination to act upon

### Read a denomination [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"denomination":{"UUID":"anglican","locale":"en_GB","label":"Anglican"}}


### Update a denomination [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"label":"Anglican"}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"denomination":{"UUID":"anglican","locale":"en_GB","label":"Anglicans"}}


### Delete a denomination [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

    + Headers

            Accept: application/json

# Group Languages

## Languages [/utilities/{locale}/languages]

Languages are a utility resource for courses, and are used to fetch the language ISO when creating a course.

Please note an Alpha administrator has to create languages in the base locale _en_ before any NAO can create a language in their own locale.

+ Parameters
    + locale (required, string, `en`) ... Locale of languages to list

### List all languages for a locale [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"languages":[{"ISO":"en","label":"English"},{"ISO":"fr","label":"French"}]}


### Create a language [POST]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"ISO":"en","label":"English"}

+ Response 201 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"language":{"ISO":"en","label":"English"}}


## Language [/utilities/{locale}/languages/{ISO}]

+ Parameters
    + locale (required, string, `en`) ... Locale of languages to list
    + ISO (required, string, `fr`) ... ISO of lanuage to act upon


### Read a language [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"language":{"ISO":"en","label":"English"}}


### Update a language [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"label":"English"}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"language":{"ISO":"en","label":"English"}}


### Delete a language [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

    + Headers

            Accept: application/json

# Group Organisation Types

## Organisation Types [/utilities/{locale}/organisation-types]

Organisation Types are a utility resource for organisations, and are used to fetch the Organisation Type UUID when creating an organisation.

Please note an Alpha administrator has to create organisation types in the base locale _en_ before any NAO can create an organisation type in their own locale.

+ Parameters
    + locale (required, string, `en`) ... Locale of organisation types to list

### List all organisation types for a locale [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"organisationTypes":[{"UUID":"workplace","label":"Workplace"}]}


### Create a organisation type [POST]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"UUID":"workplace","label":"Workplace"}

+ Response 201 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"type":{"UUID":"workplace","label":"Workplace"}}


## Organisation Type [/utilities/{locale}/organisation-types/{UUID}]

+ Parameters
    + locale (required, string, `en`) ... Locale of organisation type
    + UUID (required, string, `workplace`) ... UUID of organisation type to act upon

### Read an organisation type [GET]

+ Request

    + Headers

            Authorization: Bearer {accessToken}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"type":{"UUID":"workplace","label":"Workplace"}}


### Update an organisation type [PUT]

You only need to supply the parameters you want to change, otherwise it will keep the current values.

+ Request

    + Headers

            Authorization: Bearer {accessToken}

    + Body

            {"type":{"label":"Workplace"}}

+ Response 200 (application/json)

    + Headers

            Accept: application/json

    + Body

            {"type":{"UUID":"workplace","label":"Workplace"}}


### Delete an organisation type [DELETE]

+ Request

    + Headers

            Authorization: Bearer {accessToken}


+ Response 204 (text/html; charset=UTF-8)

    + Headers

            Accept: application/json